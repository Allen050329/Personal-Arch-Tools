# Maintainer: Zenphyrnix <zenphyrnixcloud@proton.me>
pkgname='python-pytorch-uvm-git'
_pkgname='pytorch'
_pkgver=2.0.1
pkgver=2.0.1
pkgrel=1
pkgdesc='Tensors and Dynamic neural networks in Python with strong GPU acceleration'
arch=('x86_64')
url='https://pytorch.org'
license=('BSD')
depends=(
  'ffmpeg'
  'gflags'
  'gcc12'
  'google-glog'
  'leveldb'
  'lmdb'
  'opencv'
  'openmp'
  'protobuf'
  'pybind11'
  'python-future'
  'python-numpy'
  'python-yaml'
  'qt6-base'
  'zeromq'
  'cuda'
  'nccl'
  'magma-cuda'
  'cudnn'
  'python-typing_extensions'
  'numactl'
  'python-jinja'
  'python-networkx'
  'python-filelock'
  'python-sympy'
)
makedepends=(
  'cmake'
  'doxygen'
  'git'
  'python-setuptools'
)
source=(
  "${_pkgname}-uvm::git+https://github.com/Allen050329/pytorch-uvm.git#branch=uvm"
  fix-building-for-torchvision.patch
  fix_include_system.patch
  protobuf-23.patch
  use-system-libuv.patch
)
sha512sums=('SKIP'
            'e58c4991723b1aa57eb6ccabadccc85263484adbb2327014396b41aa228cf38c7344e3c3eb132dd374791699bdd3a06412e1da6cab802d28fb9992fc7e68fb14'
            'e0160e35c6e196bdfb85267ef7d8b3d81f332ca869cefb4c12541d4f891474b05b569545e7913c9d8628ce561c6adea121132826e380db3ff2a7a62676d3be46'
            'b37d32d3bc005a68e5ebb40c42396214d75595f00e59c59719fc7fe1eabcff436f34520fb66aa671aa72ac5c5b534bc77dc6558c726a9c7978a39a9b569ca270'
            'ad2046b1870975054b8ddcb773197abcf0de9d5a4245cf87a0cb2965e080a7182b82044c7f242e2ef342bf8c6a796efd05c5161c380f18330c4e13404a4efa87')

prepare() {
  cd "${_pkgname}-uvm"

  # This is the lazy way since pytorch has sooo many submodules and they keep
  # changing them around but we've run into more problems so far doing it the
  # manual than the lazy way. This lazy way (not explicitly specifying all
  # submodules) will make building inefficient but for now I'll take it.
  # It will result in the same package, don't worry.
  git submodule sync
  git submodule update --init --recursive

  # Fix cmake prefix path (FS#78665)
  sed -i "s|cmake_prefix_path = _osp.*|cmake_prefix_path = '/usr/lib/cmake'|g" torch/utils/__init__.py

  # https://bugs.archlinux.org/task/64981
  patch -N torch/utils/cpp_extension.py "${srcdir}"/fix_include_system.patch

  # Use system libuv
  patch -Np1 -i "${srcdir}"/use-system-libuv.patch

  # fix https://github.com/pytorch/vision/issues/3695
  patch -Np1 -i "${srcdir}/fix-building-for-torchvision.patch"

  # protobuf 23 requires C++17
  find -name CMakeLists.txt | xargs sed -e 's|CXX_STANDARD 14|CXX_STANDARD 17|' -e 's|CXX_STANDARD 11|CXX_STANDARD 17|' -i

  # Sort includes to workaround conflicting _Float16 definitions https://forums.developer.nvidia.com/t/including-cub-header-breakes-compilation-with-gcc-12-and-sse2-or-better/255018
  patch -Np1 -i "${srcdir}/protobuf-23.patch"

}

build() {
  cd "${_pkgname}-uvm"
  
  # https://github.com/pytorch/pytorch/issues/26555
  sed -i 's#^  ${CMAKE_CURRENT_SOURCE_DIR}/tensor_iterator_test.cpp##g' aten/src/ATen/test/CMakeLists.txt

  # Fix build with Python 3.8
  # https://github.com/pytorch/pytorch/issues/28060
  find -name '*.cpp' -exec sed -i '/tp_print/s/nullptr/0/' {} +

  # Check tools/setup_helpers/cmake.py, setup.py and CMakeLists.txt for a list of flags that can be set via env vars.
  export _GLIBCXX_USE_CXX11_ABI=1
  export BUILD_BINARY=ON
  export BUILD_CAFFE2_OPS=ON
  export BUILD_CUSTOM_PROTOBUF=OFF
  export BUILD_DOCS=ON
  export BUILDING_WITH_TORCH_LIBS=ON
  export BUILD_JNI=OFF
  export BUILD_NAMEDTENSOR=ON
  export BUILD_SHARED_LIBS=ON
  export BUILD_TEST=OFF
  export CAFFE2_STATIC_LINK_CUDA=OFF
  export CUDA_HOME=/opt/cuda
  export CUDAHOSTCXX=/opt/cuda/bin/g++
  export CUDNN_INCLUDE_DIR=/usr/include
  export CUDNN_LIB_DIR=/usr/lib
  export PYTORCH_BUILD_NUMBER=1
  export PYTORCH_BUILD_VERSION="${_pkgver}"
  # modify to your needs, you don't need to compile for all GPU arch; and check cuda compatibility
  # export TORCH_CUDA_ARCH_LIST="6.0;6.0+PTX;6.1;6.1+PTX;6.2;6.2+PTX;7.0;7.0+PTX;7.2;7.2+PTX;7.5;7.5+PTX;8.0;8.0+PTX;8.6;8.6+PTX;8.9;8.9+PTX;9.0;9.0+PTX"
  export TORCH_CUDA_ARCH_LIST="8.9;8.9+PTX"
  export TORCH_NVCC_FLAGS="-Xfatbin -compress-all"
  export USE_CAFFE2_OPS=ON
  export USE_CUPTI_SO=ON  # make sure cupti.so is used as shared lib
  export CC=/usr/bin/gcc-12
  export CXX=/usr/bin/g++-12
  export USE_DISTRIBUTED=ON
  export USE_FBGEMM=ON
  export USE_FFMPEG=ON
  export USE_GFLAGS=ON
  export USE_GLOG=ON
  export USE_GLOO=ON
  export USE_LEVELDB=ON
  export USE_LITE_PROTO=OFF
  export USE_LMDB=ON
  export USE_NATIVE_ARCH=ON
  export USE_NNPACK=ON
  export USE_NUMPY=ON
  export USE_NVRTC=ON
  export USE_OPENCV=ON
  export USE_OPENMP=ON
  export USE_QNNPACK=ON
  export USE_ROCM=OFF
  export USE_STATIC_NCCL=OFF
  export USE_SYSTEM_EIGEN_INSTALL=ON
  export USE_SYSTEM_NCCL=ON
  export USE_TBB=ON
  export USE_ZMQ=ON
  export USE_ZSTD=ON
  export USE_TENSORRT=ON
  export USE_TENSORPIPE=ON
  export VERBOSE=1
  export USE_CUDA=ON
  export USE_CUDNN=ON
  export USE_NCCL=ON
  export BAZEL_CXXOPTS="-std=c++17:-Wfatal-errors:-w:-fpermissive:$BAZEL_CXXOPTS"
  export CXXFLAGS="-Wfatal-errors -w -fpermissive --std=c++17 $CXXFLAGS"
  export CFLAGS="-Wfatal-errors -w -fpermissive $CFLAGS"
  cd "${srcdir}/${_pkgname}-uvm"
  # this horrible hack is necessary because the current release
  # ships inconsistent CMake which tries to build objects before
  # thier dependencies, build twice when dependencies are available
  python setup.py build || python setup.py build
}

_package() {
  # Prevent setup.py from re-running CMake and rebuilding
  sed -e 's/RUN_BUILD_DEPS = True/RUN_BUILD_DEPS = False/g' -i setup.py

  python setup.py install --root="${pkgdir}"/ --optimize=1 --skip-build

  install -Dm644 LICENSE "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"

  pytorchpath="usr/lib/python$(get_pyver)/site-packages/torch"
  install -d "${pkgdir}/usr/lib"

  # put CMake files in correct place
  mv "${pkgdir}/${pytorchpath}/share/cmake" "${pkgdir}/usr/lib/cmake"

  # put C++ API in correct place
  mv "${pkgdir}/${pytorchpath}/include" "${pkgdir}/usr/include"
  mv "${pkgdir}/${pytorchpath}/lib"/*.so* "${pkgdir}/usr/lib/"

  # clean up duplicates
  # TODO: move towards direct shared library dependecy of:
  #   c10, caffe2, libcpuinfo, CUDA RT, gloo, GTest, Intel MKL,
  #   NVRTC, ONNX, protobuf, libthreadpool, QNNPACK
  rm -rf "${pkgdir}/usr/include/pybind11"

  # python module is hardcoded to look there at runtime
  ln -s /usr/include "${pkgdir}/${pytorchpath}/include"
  find "${pkgdir}"/usr/lib -type f -name "*.so*" -print0 | while read -rd $'\0' _lib; do
    ln -s ${_lib#"$pkgdir"} "${pkgdir}/${pytorchpath}/lib/"
  done
}

package() {
  pkgdesc='Tensors and Dynamic neural networks in Python with strong GPU acceleration (with CUDA and MKL-DNN)'
  conflicts=(python-pytorch python-pytorch-cuda python-pytorch-git)
  provides=(python-pytorch=${pkgver} python-pytorch-cuda=${pkgver})

  cd "${srcdir}/${_pkgname}-uvm"
  _package
}
